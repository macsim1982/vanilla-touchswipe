{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// Define the interface for the touch or mouse event\ninterface TouchMouseEvent extends MouseEvent {\n    touches?: TouchList;\n}\n\n// Define the interface for the callbacks\ninterface Callbacks {\n    start?: () => void;\n    move?: (distance: number) => void;\n    left?: (event: TouchMouseEvent) => void;\n    right?: (event: TouchMouseEvent) => void;\n    up?: (event: TouchMouseEvent) => void;\n    down?: (event: TouchMouseEvent) => void;\n    end?: (distance: number) => void;\n    cancel?: () => void;\n}\n\ntype TouchElement = HTMLElement | Element;\ntype Direction = 'left' | 'right' | 'up' | 'down' | 'none';\ntype Type = 'horizontal' | 'vertical' | 'none';\n\ninterface TouchOptions {\n    min?: number,\n    multiplicator?: number,\n    callbacks?: Callbacks\n}\n\ninterface TouchSwipeEvent {\n    e: TouchMouseEvent,\n    deltaX: number,\n    deltaY: number,\n    type: Type,\n    direction: Direction\n}\n\nfunction touchOrMouseEvent(e: TouchMouseEvent): Touch | MouseEvent {\n    return ('touches' in e && e.touches) ? e.touches[0] : e;\n}\n\nconst DEFAULT_OPTIONS: TouchOptions = {\n    min: 30,\n    multiplicator: 1\n}\n\nexport function onTouchSwipe($el: TouchElement, options: TouchOptions) {\n    let startX = 0,\n        startY = 0,\n        deltaX = 0,\n        deltaY = 0,\n        type: Type = 'none',\n        direction: Direction = 'none';\n\n    let pressed = false;\n\n    const {\n        callbacks,\n        min,\n        multiplicator\n    }: TouchOptions = {...DEFAULT_OPTIONS, ...options};\n\n    function callback(eventName: keyof Callbacks, args?: any) {\n        if (callbacks && callbacks[eventName]) {\n            callbacks[eventName](args);\n        }\n    }\n\n    function handleSwipe(dx: number, dy: number) {\n        const absDeltaX = Math.abs(dx);\n        const absDeltaY = Math.abs(dy);\n\n        // Is swipe horizontal matching limits\n        if (absDeltaX > min && absDeltaY < absDeltaX / multiplicator) {\n            direction = dx > 0 ? 'right' : 'left';\n            type = 'horizontal';\n        }\n        // Is swipe vertical matching limits\n        else if (absDeltaY > min && absDeltaX < absDeltaY / multiplicator) {\n            direction = dy > 0 ? 'down' : 'up';\n            type = 'vertical';\n        } else {\n            direction = 'none';\n            type = 'none';\n        }\n    }\n\n    function getParams(e: TouchMouseEvent): TouchSwipeEvent {\n        return {e, deltaX, deltaY, direction, type};\n    }\n\n    function startHandler(e: TouchMouseEvent) {\n        const t = touchOrMouseEvent(e);\n        startX = t.screenX;\n        startY = t.screenY;\n        pressed = true;\n\n        callback.call(callbacks, \"start\", getParams(e));\n    }\n\n    function moveHandler(e: TouchMouseEvent) {\n        if (!pressed) return;\n        const t = touchOrMouseEvent(e);\n        deltaX = t.screenX - startX;\n        deltaY = t.screenY - startY;\n\n        handleSwipe(deltaX, deltaY);\n\n        callback.call(callbacks, \"move\", getParams(e));\n    }\n\n    function endHandler(e: TouchMouseEvent) {\n        handleSwipe(deltaX, deltaY);\n\n        callback.call(callbacks, type !== 'none' ? direction : 'end', getParams(e));\n\n        pressed = false;\n        startX = 0;\n        startY = 0;\n        deltaX = 0;\n        deltaY = 0;\n        type = 'none';\n        direction = 'none';\n    }\n\n    function cancelHandler(e: TouchMouseEvent) {\n        callback.call(callbacks, \"cancel\", getParams(e));\n    }\n\n    if ($el) {\n        $el.addEventListener(\"touchstart\", startHandler, true);\n        $el.addEventListener(\"mousedown\", startHandler, true);\n        $el.addEventListener(\"touchmove\", moveHandler, true);\n        $el.addEventListener(\"mousemove\", moveHandler, true);\n        $el.addEventListener(\"touchcancel\", cancelHandler, true);\n        $el.addEventListener(\"mouseleave\", endHandler, true);\n        $el.addEventListener(\"touchend\", endHandler, true);\n        $el.addEventListener(\"mouseup\", endHandler, true);\n    }\n}\n"],
  "mappings": "AAmCA,SAASA,EAAkBC,EAAwC,CAC/D,MAAQ,YAAaA,GAAKA,EAAE,QAAWA,EAAE,QAAQ,CAAC,EAAIA,CAC1D,CAEA,IAAMC,EAAgC,CAClC,IAAK,GACL,cAAe,CACnB,EAEO,SAASC,EAAaC,EAAmBC,EAAuB,CACnE,IAAIC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAa,OACbC,EAAuB,OAEvBC,EAAU,GAER,CACF,UAAAC,EACA,IAAAC,EACA,cAAAC,CACJ,EAAkB,CAAC,GAAGb,EAAiB,GAAGG,CAAO,EAEjD,SAASW,EAASC,EAA4BC,EAAY,CAClDL,GAAaA,EAAUI,CAAS,GAChCJ,EAAUI,CAAS,EAAEC,CAAI,CAEjC,CAEA,SAASC,EAAYC,EAAYC,EAAY,CACzC,IAAMC,EAAY,KAAK,IAAIF,CAAE,EACvBG,EAAY,KAAK,IAAIF,CAAE,EAGzBC,EAAYR,GAAOS,EAAYD,EAAYP,GAC3CJ,EAAYS,EAAK,EAAI,QAAU,OAC/BV,EAAO,cAGFa,EAAYT,GAAOQ,EAAYC,EAAYR,GAChDJ,EAAYU,EAAK,EAAI,OAAS,KAC9BX,EAAO,aAEPC,EAAY,OACZD,EAAO,OAEf,CAEA,SAASc,EAAU,EAAqC,CACpD,MAAO,CAAC,EAAG,OAAAhB,EAAQ,OAAAC,EAAQ,UAAAE,EAAW,KAAAD,CAAI,CAC9C,CAEA,SAASe,EAAa,EAAoB,CACtC,IAAMC,EAAI1B,EAAkB,CAAC,EAC7BM,EAASoB,EAAE,QACXnB,EAASmB,EAAE,QACXd,EAAU,GAEVI,EAAS,KAAKH,EAAW,QAASW,EAAU,CAAC,CAAC,CAClD,CAEA,SAASG,EAAY,EAAoB,CACrC,GAAI,CAACf,EAAS,OACd,IAAMc,EAAI1B,EAAkB,CAAC,EAC7BQ,EAASkB,EAAE,QAAUpB,EACrBG,EAASiB,EAAE,QAAUnB,EAErBY,EAAYX,EAAQC,CAAM,EAE1BO,EAAS,KAAKH,EAAW,OAAQW,EAAU,CAAC,CAAC,CACjD,CAEA,SAASI,EAAW,EAAoB,CACpCT,EAAYX,EAAQC,CAAM,EAE1BO,EAAS,KAAKH,EAAWH,IAAS,OAASC,EAAY,MAAOa,EAAU,CAAC,CAAC,EAE1EZ,EAAU,GACVN,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAS,EACTC,EAAO,OACPC,EAAY,MAChB,CAEA,SAASkB,EAAc,EAAoB,CACvCb,EAAS,KAAKH,EAAW,SAAUW,EAAU,CAAC,CAAC,CACnD,CAEIpB,IACAA,EAAI,iBAAiB,aAAcqB,EAAc,EAAI,EACrDrB,EAAI,iBAAiB,YAAaqB,EAAc,EAAI,EACpDrB,EAAI,iBAAiB,YAAauB,EAAa,EAAI,EACnDvB,EAAI,iBAAiB,YAAauB,EAAa,EAAI,EACnDvB,EAAI,iBAAiB,cAAeyB,EAAe,EAAI,EACvDzB,EAAI,iBAAiB,aAAcwB,EAAY,EAAI,EACnDxB,EAAI,iBAAiB,WAAYwB,EAAY,EAAI,EACjDxB,EAAI,iBAAiB,UAAWwB,EAAY,EAAI,EAExD",
  "names": ["touchOrMouseEvent", "e", "DEFAULT_OPTIONS", "onTouchSwipe", "$el", "options", "startX", "startY", "deltaX", "deltaY", "type", "direction", "pressed", "callbacks", "min", "multiplicator", "callback", "eventName", "args", "handleSwipe", "dx", "dy", "absDeltaX", "absDeltaY", "getParams", "startHandler", "t", "moveHandler", "endHandler", "cancelHandler"]
}
